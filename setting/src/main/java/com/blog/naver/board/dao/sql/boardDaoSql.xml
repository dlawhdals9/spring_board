<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
							"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- namespace : 인터페이스명, id : 사용할 메소드명 -->

<mapper namespace="BoardDao"> 
	<!-- 쿼리문 결과 타입
		? 대신에 #{변수명} 사용.
	 -->
	
	<select id="getAllArticlesCount" resultType="_int" 
			parameterType="BoardSearchVO">
		SELECT	COUNT(1)
		FROM	BOARD
		WHERE	1 = 1
		<if test="keyword != null">
		AND	SUBJECT LIKE '%' || #{keyword} || '%'
		</if>
		<if test="writer != null">
		AND	WRITER LIKE '%' || #{writer} || '%'
		</if>
		<if test="content != null">
		AND	CONTENT LIKE '%' || #{content} || '%'
		</if>
	</select>
	
	<select id="getAllArticles"
			parameterType="BoardSearchVO"
			resultType="BoardVO">
		/* 로그 쿼리문 찾을 때 찾기 용이하도록 하기 위한 주석 */
		SELECT	* /*[BoardDao][getAllArticles]*/
		FROM	(
					SELECT	ROWNUM RNUM
							, RST.*
					FROM (
							SELECT	
							/*rs.setString, rs.getInt 필요한 경우 BoardVO 객체에 해준다. */
									BOARD_ID boardId
									, SUBJECT subject
									, CONTENT content
									, WRITER writer
									, WRITE_DATE writeDate
									, LIKE_COUNT likeCount
									, IP ip
									, PST post
							FROM	BOARD
							WHERE	1 = 1
							<if test="keyword != null">
							AND	SUBJECT LIKE '%' || #{keyword} || '%'
							</if>
							<if test="writer != null">
							AND	WRITER LIKE '%' || #{writer} || '%'
							</if>
							<if test="content != null">
							AND	CONTENT LIKE '%' || #{content} || '%'
							</if>
							ORDER 	BY BOARD_ID DESC
						) RST 
					WHERE	ROWNUM <![CDATA[ <= ]]> #{endArticleNumber} /* [] 안의 문자를 그대로 처리해라 */ 
					/* &lt; : less than */
				)
		WHERE	RNUM >= #{startArticleNumber}
	</select>
	
	<insert id="insertOneArticle" 
			parameterType="BoardVO">
		 INSERT	INTO	BOARD	/*[BoardDao][insertOneArticle]*/
		 						(
		 							BOARD_ID
		 							, SUBJECT
		 							, CONTENT
		 							, WRITER
		 							, WRITE_DATE
		 							, LIKE_COUNT
		 							, IP
		 							, PST
		 						)
		 VALUES					(
		 							BOARD_ID_SEQ.NEXTVAL
		 							, #{subject}
		 							, #{content}
		 							, #{writer}
		 							, SYSDATE
		 							, 0
		 							, #{ip}
		 							, #{post}
		 						)
	</insert>
	
	<!-- Join 절차. resultMap 객체 필요
		BOARD_ID : DB 칼럼명, property : 매핑되는 vo 멤버변수 명 --> 
	
	<resultMap type="BoardVO" id="boardMap">
		<id column="BOARD_ID" property="boardId" />
		<result column="SUBJECT" property="subject" />
		<result column="CONTENT" property="content" />
		<result column="WRITER" property="writer" />
		<result column="WRITE_DATE" property="writeDate" />
		<result column="LIKE_COUNT" property="likeCount" />
		<result column="IP" property="ip" />
		<result column="PST" property="post" />
		
		<!-- 1 : 다 관계의 경우 데이터 매핑시켜준다. 
			association => 1 : 1 관계 
			collection => 1 : 다 관계 (한명의 유저가 작성한 글 목록)
			일반 컬럼과 pk 구분 가능 pk 칼럼에게는 result 아닌 id 사용
		-->
		<association javaType="UserVO" property="userVO">
			<id column="USR_ID" property="userId"/>
			<result column="USR_NM" property="userName"/>
			<result column="JOIN_DT" property="joinDate"/>
		</association>
	</resultMap>
	
	<select id="selectOneArticle"
			 parameterType="_int"
			 resultMap="boardMap">
		SELECT	/*[BoardDao][selectOneArticle]*/
				B.BOARD_ID
				, B.SUBJECT
				, B.CONTENT
				, B.WRITER
				, B.WRITE_DATE
				, B.LIKE_COUNT
				, B.IP
				, B.PST
				, U.USR_ID
				, U.USR_NM
				, U.JOIN_DT
		FROM	BOARD B
				, USRS U
		WHERE	B.WRITER = U.USR_ID
		AND	BOARD_ID = #{boardId} /*-- board 객체의 boardId 아니고 매개변수명이다~ */
	</select>
	
	<delete id="deleteOneArticle"
			parameterType="_int">
			DELETE	/*[BoardDao][deleteOneArticle]*/
			FROM	BOARD
			WHERE	BOARD_ID = #{boardId}
	</delete>
	
</mapper>
